#!/usr/bin/env python3
"""
Simple Human Chat - Catherine AI シンプル人間会話システム
頭良すぎない、普通の友達みたいな会話
"""

import random
from typing import Dict, List, Optional

class SimpleHumanChat:
    def __init__(self):
        # 普通の友達みたいな応答パターン
        self.human_patterns = self._init_human_patterns()
        self.empathy_patterns = self._init_empathy_patterns()
        
    def _init_human_patterns(self) -> Dict[str, List[str]]:
        """普通の人間らしい会話パターン"""
        return {
            # 基本挨拶 - 親しみやすく
            'よう': ['よー', 'おっす', 'よう！', 'やあ'],
            'おっす': ['おっす！', 'よー', 'やあ', 'どうも'],
            'やあ': ['やあ！', 'よー', 'おっす', 'どうも'],
            'hi': ['Hi!', 'Hey', 'Hello'],
            'hello': ['Hello!', 'Hi there', 'Hey'],
            'こんにちは': ['こんにちは！', 'お疲れさま', 'よー'],
            'こんばんは': ['こんばんは！', 'お疲れさま', 'よー'],
            'おはよう': ['おはよー！', 'おはよう', 'モーニング'],
            
            # 元気確認 - 気遣いのある返事
            '元気？': ['元気だよー', 'まあまあかな', 'ぼちぼち', 'そっちは？'],
            'げんき？': ['元気だよー', 'まあまあ', 'ぼちぼち', 'そっちは？'],
            'げんきか？': ['元気だよー', 'まあまあ', 'そっちはどう？'],
            '元気か？': ['元気だよー', 'まあまあ', 'そっちはどう？'],
            '調子どう？': ['まあまあかな', 'ぼちぼち', 'そこそこ', 'そっちは？'],
            'どう？': ['まあまあかな', 'ぼちぼち', '普通かな', 'そっちは？'],
            
            # 相槌 - 自然な流れ
            'うん': ['そうそう', 'うん', 'そうだね', 'わかる'],
            'そう': ['そうそう', 'だよね', 'うん', 'そうなの'],
            'そうそう': ['だよね', 'うん', 'そう', 'わかる'],
            'だよね': ['そうそう', 'うん', 'ほんとに', 'わかる'],
            'そうだね': ['うん', 'そうそう', 'だよね', 'ほんと'],
            'なるほど': ['そうそう', 'だよね', 'うん', 'そうなんだ'],
            'へー': ['そうなんだ', 'へー', 'おもしろい', 'そっか'],
            'そっか': ['そうそう', 'うん', 'そうなんだ', 'だよね'],
            'わかる': ['だよね', 'そうそう', 'ほんと', 'うん'],
            
            # 感嘆 - 素直なリアクション
            'すごい': ['だよね！', 'ほんとに', 'やばい', 'すごくない？'],
            'すごいね': ['だよね', 'ほんとに', 'やばい', 'びっくり'],
            'やばい': ['やばいよね', 'ほんと', 'マジで', 'だよね'],
            'マジで': ['マジで', 'ほんとに', 'やばい', 'すごくない？'],
            'ほんと': ['ほんとに', 'マジで', 'だよね', 'そうそう'],
            'いいね': ['いいよね', 'だよね', 'うん', 'すごくない？'],
            'かわいい': ['かわいいよね', 'だよね', 'ほんと', 'うん'],
            'かっこいい': ['かっこいいよね', 'だよね', 'ほんと', 'うん'],
            
            # 驚き - 自然なリアクション
            'えー': ['えー！', 'まじで？', 'うそ', 'びっくり'],
            'うそ': ['うそでしょ', 'まじで？', 'えー', 'びっくり'],
            'まじ': ['まじで？', 'うそでしょ', 'えー', 'やばい'],
            
            # 疲れ・体調 - 気遣い
            '疲れた': ['お疲れ様', 'ゆっくりして', '大丈夫？', 'しんどそう'],
            'つかれた': ['お疲れ様', 'ゆっくりして', '大丈夫？'],
            '眠い': ['眠いね', '寝なよ', 'お疲れ様', 'しんどそう'],
            '忙しい': ['お疲れ様', '大変だね', 'がんばって', '無理しないでね'],
            'しんどい': ['大丈夫？', 'お疲れ様', 'ゆっくりして', '無理しないで'],
            
            # 暇・リラックス - 共感
            '暇': ['暇だね', '何しよっか', 'のんびりしよ', '暇つぶししよ'],
            '暇だ': ['暇だね', '何しよっか', 'のんびりしよ'],
            'ひま': ['暇だね', '何しよっか', 'のんびりしよ'],
            
            # 食べ物 - 共感・興味
            'お腹すいた': ['わかる', '何食べる？', 'ご飯にしよ', '私も'],
            '美味しい': ['よかったね', 'いいなあ', '美味しそう', '私も食べたい'],
            'うまい': ['よかったね', 'いいなあ', 'うまそう', '私も食べたい'],
            
            # 天気 - 共感
            '暑い': ['暑いよね', 'ほんと暑い', 'やばいよね', '溶けそう'],
            '寒い': ['寒いよね', 'ほんと寒い', 'やばいよね', '凍える'],
            '雨': ['雨だね', 'やだよね', '憂鬱', '嫌だなあ'],
            'いい天気': ['いい天気だね', '気持ちいい', 'お出かけしたい'],
            
            # ありがとう・謝罪 - 自然な応答
            'ありがとう': ['どういたしまして', 'いえいえ', '全然'],
            'ごめん': ['大丈夫だよ', '気にしないで', '全然'],
            'すまん': ['大丈夫', '気にしないで', '全然'],
        }
    
    def _init_empathy_patterns(self) -> Dict[str, List[str]]:
        """共感・気持ち理解パターン"""
        return {
            # ポジティブな気持ちに共感
            '嬉しい': ['よかったね！', '私も嬉しい', 'やったね', 'よかった'],
            '楽しい': ['楽しそう！', 'いいなあ', 'よかったね', '私も楽しい'],
            '最高': ['最高だね！', 'やったね', 'よかった', 'すごいじゃん'],
            'やったー': ['やったね！', 'よかった', '私も嬉しい', 'すごい'],
            
            # ネガティブな気持ちに寄り添い
            '悲しい': ['大丈夫？', 'つらいね', '元気出して', '心配'],
            'つらい': ['つらいね', '大丈夫？', '無理しないで', '心配だよ'],
            'むかつく': ['わかる', 'それはむかつくね', 'イライラするよね'],
            '腹立つ': ['わかる', 'それは腹立つ', 'イライラするね'],
            'イライラ': ['わかる', 'イライラするよね', 'ストレス溜まるよね'],
            'ショック': ['大丈夫？', 'ショックだったね', 'つらかったね'],
            '落ち込む': ['大丈夫？', '元気出して', 'つらいね', '心配だよ'],
            
            # 困った時に寄り添い
            'どうしよう': ['大丈夫だよ', '何かあった？', '心配だね', '一緒に考えよう'],
            '困った': ['大変だね', '何かあった？', '大丈夫？', '手伝えることある？'],
            'やばい': ['大丈夫？', '何があった？', '心配だね', 'どうした？'],
            
            # 不安な時に安心させる
            '不安': ['大丈夫だよ', '心配だね', '一人じゃないよ', '応援してる'],
            '心配': ['大丈夫だよ', 'わかる', '不安だよね', '一緒にいるよ'],
            '怖い': ['大丈夫だよ', '怖かったね', '一人じゃないよ', '安心して'],
        }
    
    def get_human_response(self, user_input: str) -> Optional[str]:
        """人間らしい応答を生成"""
        clean_input = user_input.strip().lower()
        
        # 句読点を除去
        for punct in ['!', '！', '?', '？', '~', '～', '.', '。', ':', '：']:
            clean_input = clean_input.replace(punct, '')
        
        # 共感パターンを優先チェック（気持ちを理解）
        for pattern, responses in self.empathy_patterns.items():
            if pattern in clean_input:
                return random.choice(responses)
        
        # 普通の会話パターンチェック
        if clean_input in self.human_patterns:
            return random.choice(self.human_patterns[clean_input])
        
        # 部分マッチング
        for pattern, responses in self.human_patterns.items():
            if pattern in clean_input or clean_input in pattern:
                return random.choice(responses)
        
        return None
    
    def is_simple_human_chat(self, text: str) -> bool:
        """シンプル人間会話対象判定"""
        clean_text = text.strip().lower()
        
        # 長すぎる文章は除外（普通の会話は短い）
        if len(clean_text) > 30:
            return False
        
        # 機能要求・複雑な質問は除外
        excluded = [
            'todo', 'リスト', 'タスク', '教えて', '説明して', 'どうやって',
            '方法', 'ヘルプ', 'help', '手順', 'やり方', '詳しく'
        ]
        if any(ex in clean_text for ex in excluded):
            return False
        
        # 句読点を除去してチェック
        for punct in ['!', '！', '?', '？', '~', '～', '.', '。']:
            clean_text = clean_text.replace(punct, '')
        
        # パターン存在チェック
        all_patterns = {**self.human_patterns, **self.empathy_patterns}
        
        # 直接マッチ
        if clean_text in all_patterns:
            return True
        
        # 部分マッチ
        return any(pattern in clean_text or clean_text in pattern 
                  for pattern in all_patterns.keys())
    
    def get_pattern_count(self) -> int:
        """総パターン数"""
        return len(self.human_patterns) + len(self.empathy_patterns)