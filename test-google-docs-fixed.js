#!/usr/bin/env node

/**
 * Google Docs ‰øÆÊ≠£Áâà„ÉÜ„Çπ„Éà - Ê≠£„Åó„ÅÑ„ÉÜ„Ç≠„Çπ„ÉàÊåøÂÖ•ÊñπÊ≥ï
 */

const { google } = require('googleapis');
require('dotenv').config();

const CLIENT_ID = process.env.GOOGLE_OAUTH_CLIENT_ID;
const CLIENT_SECRET = process.env.GOOGLE_OAUTH_CLIENT_SECRET;
const REFRESH_TOKEN = process.env.GOOGLE_FULL_REFRESH_TOKEN || process.env.GMAIL_REFRESH_TOKEN;

async function setupAuth() {
    const oauth2Client = new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, 'http://localhost:3000/oauth2/callback');
    oauth2Client.setCredentials({ refresh_token: REFRESH_TOKEN });
    return oauth2Client;
}

async function testGoogleDocsFixed(auth) {
    console.log('Testing Google Docs (Fixed Version)...');
    
    try {
        const docs = google.docs({ version: 'v1', auth });
        
        // Êñ∞„Åó„ÅÑ„Éâ„Ç≠„É•„É°„É≥„Éà„Çí‰ΩúÊàê
        console.log('Creating new document...');
        const createResponse = await docs.documents.create({
            resource: {
                title: `Catherine Bot Report - ${new Date().toISOString().split('T')[0]} (Fixed)`
            }
        });

        const documentId = createResponse.data.documentId;
        const title = createResponse.data.title;
        
        console.log(`Created document: ${title}`);
        console.log(`Document ID: ${documentId}`);
        console.log(`URL: https://docs.google.com/document/d/${documentId}/edit`);

        // Ê≠£„Åó„ÅÑÊñπÊ≥ï„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíËøΩÂä†
        console.log('Adding content using correct method...');
        
        // ‰∏ÄÊã¨„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíËøΩÂä†
        const content = `Catherine Bot Integration Report

Generated on: ${new Date().toLocaleString()}

## Current Status

‚úÖ Gmail API Integration: Complete
‚úÖ Google Tasks Integration: Complete
‚úÖ Google Calendar Integration: Complete
‚úÖ Google Drive Integration: Complete
‚úÖ Google Sheets Integration: Complete
üîÑ Google Docs Integration: Testing (Fixed)

## Recent Tasks

1. Review MCP Integration - High Priority
   - Check all MCP servers are working properly
   - Verify Notion and Google services integration
   
2. Update Discord Commands - Normal Priority
   - Add new slash commands for task management
   - Implement natural language processing
   
3. Google Workspace Integration - In Progress
   - Gmail: Email monitoring and task creation
   - Tasks: Automated task management
   - Sheets: Data tracking and reporting
   - Docs: Automated report generation
   - Drive: File organization and sharing

## Integration Features

### Gmail Integration
- Real-time email monitoring
- Subject line extraction
- Automatic task creation from emails
- Email-based notifications

### Google Tasks Integration  
- Task creation and management
- Priority and due date setting
- Integration with Calendar reminders
- Cross-platform synchronization

### Google Sheets Integration
- Automated data entry
- Task tracking spreadsheets
- Progress reporting
- Data visualization

### Google Docs Integration
- Automated report generation
- Meeting notes creation
- Documentation updates
- Collaborative editing

### Google Drive Integration
- File organization
- Folder creation and management
- Document sharing
- Version control

## Next Steps

- Integrate all Google services with Catherine Discord bot
- Add natural language processing for commands
- Implement automated reporting features
- Set up monitoring and notifications
- Create user-friendly interface for all functions

## Technical Notes

OAuth 2.0 authentication is working properly for all Google APIs.
Service Account authentication is available for server-to-server operations.
MCP (Model Context Protocol) integration provides seamless access to all services.

All APIs tested successfully:
‚úÖ Gmail API - Email access and monitoring
‚úÖ Google Tasks API - Task management
‚úÖ Google Calendar API - Event scheduling
‚úÖ Google Sheets API - Spreadsheet operations
‚úÖ Google Docs API - Document creation and editing
‚úÖ Google Drive API - File management

---

This report was automatically generated by Catherine Bot.
For questions, contact the development team.

Catherine Bot is now capable of full Google Workspace integration!`;

        // ‰∏ÄÂ∫¶„Å´ÂÖ®„Å¶„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊåøÂÖ•
        await docs.documents.batchUpdate({
            documentId,
            resource: {
                requests: [
                    {
                        insertText: {
                            location: { index: 1 },
                            text: content
                        }
                    }
                ]
            }
        });

        // „Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç
        console.log('Reading document content...');
        const readResponse = await docs.documents.get({ documentId });
        
        console.log('Document created successfully:');
        console.log(`  Title: ${readResponse.data.title}`);
        console.log(`  Revision ID: ${readResponse.data.revisionId}`);
        console.log(`  Content length: ${content.length} characters`);
        console.log(`  Content elements: ${readResponse.data.body.content.length}`);

        return { 
            documentId, 
            title,
            url: `https://docs.google.com/document/d/${documentId}/edit`,
            success: true 
        };
        
    } catch (error) {
        console.error('Google Docs Error:', error.message);
        return { success: false, error: error.message };
    }
}

async function main() {
    console.log('Catherine Google Docs Integration Test (Fixed)');
    console.log('=============================================');
    
    try {
        const auth = await setupAuth();
        const docResult = await testGoogleDocsFixed(auth);
        
        console.log('\n=============================================');
        console.log('Google Docs Test Results:');
        console.log('=============================================');
        
        if (docResult.success) {
            console.log('Google Docs: ‚úÖ Success (Fixed!)');
            console.log(`  URL: ${docResult.url}`);
            console.log('\nCatherine can now:');
            console.log('- Create Google Docs with formatted content');
            console.log('- Generate automated reports');
            console.log('- Add structured text and formatting');
            console.log('- Manage document revisions');
        } else {
            console.log('Google Docs: ‚ùå Still Failed');
            console.log(`  Error: ${docResult.error}`);
        }
        
    } catch (error) {
        console.error('Test failed:', error.message);
    }
}

main().catch(console.error);